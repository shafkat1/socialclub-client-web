name: Backend & Infrastructure Deploy

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - 'infra/**'
      - 'package.json'
      - '.github/workflows/backend-infra-deploy.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  ECR_REPOSITORY: clubapp-backend
  TERRAFORM_VERSION: '1.13.4'

jobs:
  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      image-uri: ${{ steps.image.outputs.uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "tag=latest-prod" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "tag=latest-staging" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.env.outputs.tag }}
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache
          cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max

      - name: Output image URI
        id: image
        run: echo "uri=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    name: Deploy Infrastructure with Terraform
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive ./infra/terraform
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          cd infra/terraform
          terraform init \
            -backend-config="bucket=clubapp-terraform-state" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -json ./infra/terraform

      - name: Terraform Plan
        id: plan
        run: |
          cd infra/terraform
          terraform plan \
            -var-file=terraform.tfvars \
            -json > plan.json || true
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd infra/terraform
          terraform apply \
            -var-file=terraform.tfvars \
            -auto-approve \
            -input=false
        env:
          TF_LOG: INFO

      - name: Get Terraform Outputs
        id: outputs
        if: github.ref == 'refs/heads/main'
        run: |
          cd infra/terraform
          terraform output -json > outputs.json
          cat outputs.json

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = JSON.parse(fs.readFileSync('./infra/terraform/plan.json', 'utf8'));
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan\n\`\`\`json\n${JSON.stringify(plan, null, 2)}\n\`\`\``
            });

  deploy-backend:
    name: Deploy Backend to ECS
    needs: build-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "cluster=clubapp-prod" >> $GITHUB_OUTPUT
            echo "service=clubapp-backend-prod" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "cluster=clubapp-dev" >> $GITHUB_OUTPUT
            echo "service=clubapp-backend" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./backend/task-definition.json
          container-name: ${{ env.ECR_REPOSITORY }}
          image: ${{ needs.build-backend.outputs.image-uri }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ steps.env.outputs.service }}
          cluster: ${{ steps.env.outputs.cluster }}
          wait-for-service-stability: true

      - name: Check service health
        run: |
          for i in {1..30}; do
            DESIRED=$(aws ecs describe-services \
              --cluster ${{ steps.env.outputs.cluster }} \
              --services ${{ steps.env.outputs.service }} \
              --query 'services[0].desiredCount' \
              --output text)
            RUNNING=$(aws ecs describe-services \
              --cluster ${{ steps.env.outputs.cluster }} \
              --services ${{ steps.env.outputs.service }} \
              --query 'services[0].runningCount' \
              --output text)
            
            if [ "$DESIRED" -eq "$RUNNING" ]; then
              echo "✅ All tasks are running"
              exit 0
            fi
            
            echo "Waiting... ($i/30) - Desired: $DESIRED, Running: $RUNNING"
            sleep 10
          done
          
          echo "❌ Service did not reach desired state"
          exit 1

      - name: Slack notification (Success)
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "Backend deployment successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ Backend deployed to *${{ steps.env.outputs.environment }}*\nImage: `${{ needs.build-backend.outputs.image-uri }}`\nBranch: `${{ github.ref_name }}`"
                  }
                }
              ]
            }

      - name: Slack notification (Failure)
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "Backend deployment failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ Backend deployment failed\nBranch: `${{ github.ref_name }}`\nCheck logs for details"
                  }
                }
              ]
            }
